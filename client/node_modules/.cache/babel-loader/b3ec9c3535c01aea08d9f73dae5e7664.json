{"ast":null,"code":"import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport { getUserCartRef } from \"../../firebase/firebase.utils\";\nimport { selectCurrentUser } from \"../user/user.selectors\";\nimport UserActionTypes from \"../user/user.types\";\nimport CartActionTypes from \"./cart.types\";\nimport { crearCart, setCartFromFirebase } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nexport function* clearCartOnSignOut() {\n  yield put(crearCart());\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)]);\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}","map":{"version":3,"sources":["/Users/riku/Desktop/project/react-clone/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","getUserCartRef","selectCurrentUser","UserActionTypes","CartActionTypes","crearCart","setCartFromFirebase","selectCartItems","clearCartOnSignOut","onSignOutSuccess","SIGN_OUT_SUCCESS","cartSagas","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMT,GAAG,CAACM,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUI,gBAAV,GAA6B;AAClC,QAAMX,UAAU,CAACK,eAAe,CAACO,gBAAjB,EAAmCF,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUG,SAAV,GAAsB;AAC3B,QAAMf,GAAG,CAAC,CAACC,IAAI,CAACY,gBAAD,CAAL,CAAD,CAAT;AACD;AAED,OAAO,UAAUG,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMb,MAAM,CAACE,iBAAD,CAAhC;;AACA,MAAIW,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMb,cAAc,CAACY,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMhB,MAAM,CAACO,eAAD,CAA9B;AACA,YAAMO,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMT,OAAO,GAAG,MAAMb,cAAc,CAACsB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAM1B,GAAG,CAACO,mBAAmB,CAACkB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\n\nimport { getUserCartRef } from \"../../firebase/firebase.utils\";\nimport { selectCurrentUser } from \"../user/user.selectors\";\nimport UserActionTypes from \"../user/user.types\";\nimport CartActionTypes from \"./cart.types\";\nimport { crearCart, setCartFromFirebase } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\n\nexport function* clearCartOnSignOut() {\n  yield put(crearCart());\n}\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)]);\n}\n\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({ cartItems });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport function* checkCartFromFirebase({ payload: user }) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\n"]},"metadata":{},"sourceType":"module"}